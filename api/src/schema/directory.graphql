#Mutation Definitions
type Mutation {
  #CREATE OPERATIONS
  # Add Member to the Database
  CreateMember(
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    phoneNumber: String!
    whatsappNumber: String
    dob: String!
    maritalStatus: String!
    gender: String!
    occupation: String
    bacenta: String!
    ministry: String
    pictureUrl: String!
  ): Member
    @cypher(
      statement: """
      CREATE (m:Member {whatsappNumber:$whatsappNumber})
      SET
      	m.id = apoc.create.uuid(),
      	m.firstName = $firstName,
      	m.middleName = $middleName,
      	m.lastName = $lastName,
      	m.email = $email,
      	m.phoneNumber = $phoneNumber,
      	m.pictureUrl = $pictureUrl
      CREATE (log:HistoryLog)<-[:HAS_HISTORY]-(b)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = time(),
        log.historyRecord = $firstName + $lastName+' was registered on '+toString(date())
      MERGE (t:TimeGraph {date: date()})
      	  MERGE (log)-[:RECORDED_ON]->(t)
      WITH m
      MATCH (ms:MaritalStatus {status:$maritalStatus})
      MATCH (g:Gender {gender: $gender})

         MERGE (m)-[:HAS_MARITAL_STATUS]-> (ms)
      MERGE (m)-[:HAS_GENDER]-> (g)

      WITH m
         CALL {
         	WITH m
         	WITH m  WHERE $dob IS NOT NULL
         	MERGE (t:TimeGraph {date: date($dob)})
      	  MERGE (m)-[:WAS_BORN_ON]->(t)
         	RETURN count(m)
         	}

      WITH m
         CALL {
         	WITH m
         	WITH m  WHERE $occupation IS NOT NULL
         	MERGE (o:Occupation {occupation:$occupation})
      	MERGE (m)-[:HAS_OCCUPATION]-> (o)
         	RETURN count(m)
         	}
      WITH m
      CALL {
         	WITH m
         	WITH m  WHERE $bacenta IS NOT NULL
         	MATCH (c:Bacenta {id: $bacenta})
      	MERGE (m)-[:BELONGS_TO]-> (c)
         	RETURN count(m)
         	}
      WITH m
      CALL {
         	WITH m
         	WITH m  WHERE $ministry IS NOT NULL
         	MATCH (s:Ministry {id:$ministry})
      	MERGE (m)-[:BELONGS_TO]-> (s)
         	RETURN count(m)
         	}

      RETURN m
      """
    )

  CreateTown(
    townName: String
    lWhatsappNumber: String
    id: ID
    centres: [ID]
  ): Town
    @cypher(
      statement: """
      CREATE (t:Town {name:$townName})
         	SET
      	t.id = apoc.create.uuid()
       CREATE (log:HistoryLog)<-[:HAS_HISTORY]-(b)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = time(),
        log.historyRecord = $townName +' Church was started'
      MERGE (t:TimeGraph {date: date()})
      	  MERGE (log)-[:RECORDED_ON]->(t)
      WITH t
      MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
      MERGE (m)-[:LEADS]->(t)
      MERGE (a:Member {id: $id})
      MERGE (a)-[:HAS_TOWN]->(t)

      WITH t
         CALL {
         	WITH t
         	WITH t  WHERE $centres IS NOT NULL
         	UNWIND $centres AS x
             MATCH (c:Centre {id:x})
             OPTIONAL MATCH (t1)-[r:HAS_CENTRE]->(c)
             DELETE r
             MERGE (t)-[:HAS_CENTRE]->(c)
         	RETURN count(t)
         	}

      RETURN t
      """
    )
  CreateCampus(
    campusName: String
    lWhatsappNumber: String
    id: ID
    centres: [ID]
  ): Campus
    @cypher(
      statement: """
      CREATE (t:Campus {name:$campusName})
         	SET
      	t.id = apoc.create.uuid()
       CREATE (log:HistoryLog )<-[:HAS_HISTORY]-(b)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = time(),
        log.historyRecord = $campusName +' Church was started'
      MERGE (t:TimeGraph {date: date(date())})
      	  MERGE (log)-[:RECORDED_ON]->(t)
      WITH t
      MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
      MERGE (m)-[:LEADS]->(t)
      MERGE (a:Member {id: $id})
      MERGE (a)-[:HAS_CAMPUS]->(t)

      WITH t
         CALL {
         	WITH t
         	WITH t  WHERE $centres IS NOT NULL
         	UNWIND $centres AS x
             MATCH (c:Centre {id:x})
             OPTIONAL MATCH (t1)-[r:HAS_CENTRE]->(c)
             DELETE r
             MERGE (t)-[:HAS_CENTRE]->(c)
         	RETURN count(t)
         	}

      RETURN t
      """
    )
  CreateCentre(
    centreName: String
    lWhatsappNumber: String
    townCampusId: ID
    bacentas: [ID]
  ): Centre
    @cypher(
      statement: """
      CREATE (c:Centre {name:$centreName})
         	SET
      	c.id = apoc.create.uuid()
      CREATE (log:HistoryLog {created_at:date()})<-[:HAS_HISTORY]-(b)
        SET
        log.id =  apoc.create.uuid(),
        log.timeStamp = time(),
        log.historyRecord = $centreName +' Centre was started'
      MERGE (t:TimeGraph {date: date()})
      	  MERGE (log)-[:RECORDED_ON]->(t)
      WITH c
      MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
      MATCH (t {id:$townCampusId})-[:HAS_TOWN|:HAS_CAMPUS]-()
      MERGE (t)-[:HAS_CENTRE]->(c)
      MERGE (m)-[:LEADS]->(c)


      WITH c
         CALL {
             WITH c
             WITH c  WHERE $bacentas IS NOT NULL
             UNWIND $bacentas AS x
             MATCH (b:Bacenta {id:x})
             OPTIONAL MATCH (c1)-[r:HAS_BACENTA]->(b)
             DELETE r
             MERGE (c)-[:HAS_BACENTA]->(b)
             RETURN count(c)
             }

      RETURN c
      """
    )
  CreateBacenta(
    bacentaName: String!
    lWhatsappNumber: String
    centreId: ID
    meetingDay: String!
    venueLongitude: Float
    venueLatitude: Float
  ): Bacenta
    @cypher(
      statement: """
      CREATE (b:Bacenta {name:$bacentaName,location: point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})})
         	SET
      	b.id = apoc.create.uuid()

      WITH b
      MATCH (c:Centre {id: $centreId})
      MERGE (md:ServiceDay {day: $meetingDay})
      MERGE (c)-[:HAS_BACENTA]->(b)
      MERGE (b)-[:MEETS_ON_DAY]->(md)


      WITH b
        CALL {
         	WITH b
          WITH b WHERE $lWhatsappNumber IS NOT NULL
          MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
          CREATE (log:HistoryLog:ServiceLog)
           SET
            log.id = apoc.create.uuid(),
            log.timeStamp = time(),
            log.historyRecord = m.firstName + ' ' +m.lastName + ' started ' + $bacentaName +' Bacenta'
          MERGE (t:TimeGraph {date: date()})
      	    MERGE (log)-[:RECORDED_ON]->(t)
            MERGE (log)<-[:HAS_HISTORY]-(m)
            MERGE (log)<-[r:HAS_HISTORY]-(b)
          MERGE (m)-[:LEADS]->(b)
            SET r.pointer = true
         	RETURN count(b)
         	}

         RETURN b
      """
    )

  #UPDATE OPERATIONS
  UpdateMemberDetails(
    id: ID!
    firstName: String!
    middleName: String
    lastName: String!
    email: String
    phoneNumber: String!
    whatsappNumber: String
    dob: String
    maritalStatus: String!
    gender: String!
    occupation: String
    bacenta: String
    ministry: String
    pictureUrl: String!
  ): Member
    @cypher(
      statement: """
      MATCH (m:Member {id:$id})
      SET
      	m.firstName = $firstName,
      	m.middleName = $middleName,
      	m.lastName = $lastName,
      	m.email = $email,
      	m.phoneNumber = $phoneNumber,
      	m.pictureUrl = $pictureUrl

      WITH m

      MATCH (g:Gender {gender: $gender})
      MERGE (m)-[:HAS_GENDER]-> (g)


      WITH m
         CALL {
         	WITH m
         	WITH m  WHERE $dob IS NOT NULL
         	MERGE (t:TimeGraph {date: date($dob)})
      	WITH m,t
      	OPTIONAL MATCH (m)-[r1:WAS_BORN_ON]->()
      	DELETE r1
      	MERGE (m)-[:WAS_BORN_ON]->(t)
         	RETURN count(m)
         	}

      WITH m
         CALL {
         	WITH m
         	WITH m  WHERE $maritalStatus IS NOT NULL
         	MATCH (ms:MaritalStatus {status:$maritalStatus})
      	OPTIONAL MATCH (m)-[r1:HAS_MARITAL_STATUS]->()
      	DELETE r1
      	MERGE (m)-[:HAS_MARITAL_STATUS]-> (ms)
         	RETURN count(m)
         	}

         WITH m
         CALL {
         	WITH m
         	WITH m  WHERE $occupation IS NOT NULL
      	MATCH (m)-[r1:HAS_OCCUPATION]-> ()
         	MERGE (o:Occupation {occupation:$occupation})
      	DELETE r1
      	MERGE (m)-[:HAS_OCCUPATION]-> (o)
         	RETURN count(m)
         	}
      WITH m
      CALL {
         	WITH m
         	WITH m  WHERE $bacenta IS NOT NULL
         	MATCH (c:Bacenta {id: $bacenta})
      	OPTIONAL MATCH (m)-[r1:BELONGS_TO]-> (:Bacenta)
      	DELETE r1
      	MERGE (m)-[:BELONGS_TO]-> (c)
         	RETURN count(m)
         	}
      WITH m
      CALL {
         	WITH m
         	WITH m  WHERE $ministry IS NOT NULL
         	MATCH (s:Ministry {id:$ministry})
      	OPTIONAL MATCH (m)-[r1:BELONGS_TO]-> (:Ministry)
      	DELETE r1
      	MERGE (m)-[:BELONGS_TO]-> (s)
         	RETURN count(m)
         	}

      RETURN m
      """
    )

  UpdateTown(
    townId: ID!
    townName: String
    lWhatsappNumber: String
    bishopId: ID
  ): Town
    @cypher(
      statement: """
      MATCH (t:Town {id: $townId})
      	SET t.name = $townName

      WITH t
         CALL {
        WITH t
          MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
          OPTIONAL MATCH (t)<-[r:LEADS]-()
          DELETE r
          MERGE (m)-[:LEADS]->(t)
        RETURN count(t)
         	}

      WITH t
         CALL {
         	WITH t
          MATCH (b:Member {id: $bishopId})
          OPTIONAL MATCH (t)<-[r:HAS_TOWN]-()
          DELETE r
          MERGE (b)-[:HAS_TOWN]->(t)
         	RETURN count(t)
         	}

      RETURN t
      """
    )
  UpdateCampus(
    campusId: ID
    campusName: String
    lWhatsappNumber: String
    bishopId: ID
    centres: [ID]
  ): Campus
    @cypher(
      statement: """
      MATCH (t:Campus {id: $campusId})
      	SET t.name = $campusName

      WITH t
         CALL {
         	WITH t

             MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
             OPTIONAL MATCH (t)<-[r:LEADS]-()
             DELETE r
             MERGE (m)-[:LEADS]->(t)
         	RETURN count(t)
         	}

      WITH t
         CALL {
         	WITH t

             MATCH (b:Member {id: $bishopId})
             OPTIONAL MATCH (t)<-[r:HAS_CAMPUS]-()
             DELETE r
             MERGE (b)-[:HAS_CAMPUS]->(t)
         	RETURN count(t)
         	}

      RETURN t
      """
    )
  UpdateCentre(
    centreId: ID
    centreName: String
    lWhatsappNumber: String
    campusTownID: ID
  ): Centre
    @cypher(
      statement: """
      MATCH (c:Centre {id: $centreId})
      	SET c.name = $centreName

      WITH c
         CALL {
         	WITH c

            MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
            OPTIONAL MATCH (c)<-[r:LEADS]-()
            DELETE r
            MERGE (m)-[:LEADS]->(c)
         	RETURN count(c)
         	}

      WITH c
         CALL {
         	WITH c
      		OPTIONAL MATCH (b{id: $campusTownID})

            OPTIONAL MATCH (c)<-[r:HAS_CENTRE]-()
            DELETE r
            MERGE (b)-[:HAS_CENTRE]->(c)
         	RETURN count(c)
         	}

      RETURN c
      """
    )
  UpdateBacenta(
    id: ID
    name: String
    meetingDay: String
    lWhatsappNumber: String
    venueLongitude: Float
    venueLatitude: Float
  ): Bacenta
    @cypher(
      statement: """
               MATCH (b:Bacenta {id: $id})
               	SET b.name = $name
              	SET b.location = point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})

              WITH b
                    CALL {
                     	WITH b
                      WITH b WHERE $lWhatsappNumber IS NOT NULL
                      MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
                      OPTIONAL MATCH (b)<-[r:LEADS]-()
                      DELETE r
                      MERGE (m)-[:LEADS]->(b)
                     	RETURN count(b)
                     	}
               WITH b
                    CALL {
                     	WITH b
                      WITH b WHERE $meetingDay IS NOT NULL
                      MATCH (md:ServiceDay {day: $meetingDay})
                      OPTIONAL MATCH (b)<-[r:MEETS_ON_DAY]-()
                      DELETE r
                      MERGE (b)-[:MEETS_ON_DAY]->(md)
                     	RETURN count(b)
                     	}

      RETURN b
      """
    )
  LogBacentaHistory(
    bacentaId: ID!
    historyRecord: String
    oldLeaderId: ID
    leaderId: ID
    oldCentreId: ID
    newCentreId: ID
    loggedBy: ID
  ): Bacenta
    @cypher(
      statement: """
       MATCH  (b:Bacenta {id: $bacentaId})
       CREATE (log:HistoryLog {id: apoc.create.uuid()})
         SET log.historyRecord = $historyRecord,
           log.timeStamp = time()
       MERGE (t:TimeGraph {date: date()})
       MERGE (b)-[r:HAS_HISTORY]->(log)
       MERGE (log)-[:RECORDED_ON]->(t)

       WITH log,b
       CALL{
         WITH log
         WITH log WHERE $leaderId IS NOT NULL
      OPTIONAL MATCH (oldl:Member {id: $oldLeaderId})
       MATCH (l:Member {id: $leaderId})
         SET log :ServiceLog
         WITH log, l, oldl
       OPTIONAl MATCH ()-[r0:HAS_HISTORY]->(log)
         SET r0.pointer = false
         WITH log,l, oldl
       CREATE (oldl)-[:HAS_HISTORY]->(log)
       CREATE (l)-[r:HAS_HISTORY]->(log)
          SET r.pointer = true
          WITH log
       RETURN COUNT(log)
       }


       WITH log,b
       CALL{
         WITH log
         WITH log WHERE $oldCentreId IS NOT NULL
         MATCH (c:Centre {id: $oldCentreId})
         MERGE (c)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,b
       CALL{
         WITH log
         WITH log WHERE $newCentreId IS NOT NULL
         MATCH (c:Centre {id: $newCentreId})
         MERGE (c)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,b
       CALL {
         WITH log
         WITH log WHERE $loggedBy IS NOT NULL
         MATCH (m:Member {id: $loggedBy})
         MERGE (m)<-[:LOGGED_BY]-(log)
         RETURN COUNT(log)
       }

       RETURN b
      """
    )
  LogCentreHistory(
    centreId: ID!
    historyRecord: String
    leaderId: ID
    oldLeaderId: ID
    newCampusTownId: ID
    oldCampusTownId: ID
    loggedBy: ID
  ): Centre
    @cypher(
      statement: """
       MATCH  (c:Centre {id: $centreId})
       CREATE (log:HistoryLog {id: apoc.create.uuid()})
         SET log.historyRecord = $historyRecord,
           log.timeStamp = time()
       MERGE (t:TimeGraph {date: date()})
       MERGE (c)-[r:HAS_HISTORY]->(log)
       MERGE (log)-[:RECORDED_ON]->(t)

       WITH log,c
       CALL{
         WITH log
         WITH log WHERE $leaderId IS NOT NULL
       MATCH (l:Member {id: $leaderId})
      OPTIONAL MATCH (oldl:Member {id: $oldLeaderId})
         SET log :ServiceLog
         WITH log, l,oldl
       OPTIONAl MATCH ()-[r0:HAS_HISTORY]->(log)
         SET r0.pointer = false
         WITH log,l,oldl
       CREATE (oldl)-[:HAS_HISTORY]->(log)
       CREATE (l)-[r:HAS_HISTORY]->(log)
          SET r.pointer = true
          WITH log
       RETURN COUNT(log)
       }


       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $oldCampusTownId IS NOT NULL
         MATCH (t {id: $oldCampusTownId}) WHERE t:Town OR t:Campus
         MERGE (t)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $newCampusTownId IS NOT NULL
         MATCH (t {id: $newCampusTownId}) WHERE t:Town OR t:Campus
         MERGE (t)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $loggedBy IS NOT NULL
         MATCH (m:Member {id: $loggedBy})
         MERGE (m)<-[:LOGGED_BY]-(log)
         RETURN COUNT(log)
       }

       RETURN c
      """
    )
  LogCampusHistory(
    campusId: ID!
    historyRecord: String
    leaderId: ID
    oldLeaderId: ID
    newBishopId: ID
    oldBishopId: ID
    loggedBy: ID
  ): Campus
    @cypher(
      statement: """
      MATCH  (c:Campus {id: $campusId})
      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.historyRecord = $historyRecord,
          log.timeStamp = time()
      MERGE (t:TimeGraph {date: date()})
      MERGE (c)-[r:HAS_HISTORY]->(log)
      MERGE (log)-[:RECORDED_ON]->(t)

      WITH log,c
      CALL{
        WITH log
        WITH log WHERE $leaderId IS NOT NULL
      MATCH (l:Member {id: $leaderId})
       OPTIONAL MATCH (oldl:Member {id: $oldLeaderId})
        SET log :ServiceLog
        WITH log, l,oldl
      OPTIONAl MATCH ()-[r0:HAS_HISTORY]->(log)
        SET r0.pointer = false
        WITH log,l,oldl
      CREATE (oldl)-[:HAS_HISTORY]->(log)
      CREATE (l)-[r:HAS_HISTORY]->(log)
         SET r.pointer = true
         WITH log
      RETURN COUNT(log)
      }


      WITH log,c
      CALL {
        WITH log
        WITH log WHERE $oldBishopId IS NOT NULL
        MATCH (t:Member {id: $oldBishopId})
        MERGE (t)-[:HAS_HISTORY]->(log)
        RETURN COUNT(log)
      }

      WITH log,c
      CALL {
        WITH log
        WITH log WHERE $newBishopId IS NOT NULL
        MATCH (t:Member {id: $newBishopId})
        MERGE (t)-[:HAS_HISTORY]->(log)
        RETURN COUNT(log)
      }

      WITH log,c
       CALL {
         WITH log
         WITH log WHERE $loggedBy IS NOT NULL
         MATCH (m:Member {id: $loggedBy})
         MERGE (m)<-[:LOGGED_BY]-(log)
         RETURN COUNT(log)
       }

      RETURN c
      """
    )
  LogTownHistory(
    townId: ID!
    historyRecord: String
    leaderId: ID
    oldLeaderId: ID
    newBishopId: ID
    oldBishopId: ID
    loggedBy: ID
  ): Town
    @cypher(
      statement: """
      MATCH  (c:Town {id: $townId})
      CREATE (log:HistoryLog {id: apoc.create.uuid()})
        SET log.historyRecord = $historyRecord,
          log.timeStamp = time()
      MERGE (t:TimeGraph {date: date()})
      MERGE (c)-[r:HAS_HISTORY]->(log)
      MERGE (log)-[:RECORDED_ON]->(t)

      WITH log,c
      CALL{
        WITH log
        WITH log WHERE $leaderId IS NOT NULL
      MATCH (l:Member {id: $leaderId})
       OPTIONAL MATCH (oldl:Member {id: $oldLeaderId})
        SET log :ServiceLog
        WITH log, l,oldl
      OPTIONAl MATCH ()-[r0:HAS_HISTORY]->(log)
        SET r0.pointer = false
        WITH log,l,oldl
      CREATE (oldl)-[:HAS_HISTORY]->(log)
      CREATE (l)-[r:HAS_HISTORY]->(log)
         SET r.pointer = true
         WITH log
      RETURN COUNT(log)
      }


      WITH log,c
      CALL {
        WITH log
        WITH log WHERE $oldBishopId IS NOT NULL
        MATCH (t:Member {id: $oldBishopId})
        MERGE (t)-[:HAS_HISTORY]->(log)
        RETURN COUNT(log)
      }

      WITH log,c
      CALL {
        WITH log
        WITH log WHERE $newBishopId IS NOT NULL
        MATCH (t:Member {id: $newBishopId})
        MERGE (t)-[:HAS_HISTORY]->(log)
        RETURN COUNT(log)
      }

      WITH log,c
       CALL {
         WITH log
         WITH log WHERE $loggedBy IS NOT NULL
         MATCH (m:Member {id: $loggedBy})
         MERGE (m)<-[:LOGGED_BY]-(log)
         RETURN COUNT(log)
       }

      RETURN c
      """
    )
  LogSontaHistory(
    sontaId: ID!
    historyRecord: String
    leaderId: ID
    oldLeaderId: ID
    newCampusTownId: ID
    oldCampusTownId: ID
    loggedBy: ID
  ): Sonta
    @cypher(
      statement: """
       MATCH  (c:Sonta {id: $sontaId})
       CREATE (log:HistoryLog {id: apoc.create.uuid()})
         SET log.historyRecord = $historyRecord,
           log.timeStamp = time()
       MERGE (t:TimeGraph {date: date()})
       MERGE (c)-[r:HAS_HISTORY]->(log)
       MERGE (log)-[:RECORDED_ON]->(t)

       WITH log,c
       CALL{
         WITH log
         WITH log WHERE $leaderId IS NOT NULL
       MATCH (l:Member {id: $leaderId})
      OPTIONAL MATCH (oldl:Member {id: $oldLeaderId})
         SET log :ServiceLog
         WITH log, l,oldl
       OPTIONAl MATCH ()-[r0:HAS_HISTORY]->(log)
         SET r0.pointer = false
         WITH log,l,oldl
       CREATE (oldl)-[:HAS_HISTORY]->(log)
       CREATE (l)-[r:HAS_HISTORY]->(log)
          SET r.pointer = true
          WITH log
       RETURN COUNT(log)
       }


       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $oldCampusTownId IS NOT NULL
         MATCH (t {id: $oldCampusTownId}) WHERE t:Town OR t:Campus
         MERGE (t)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $newCampusTownId IS NOT NULL
         MATCH (t {id: $newCampusTownId}) WHERE t:Town OR t:Campus
         MERGE (t)-[:HAS_HISTORY]->(log)
         RETURN COUNT(log)
       }

       WITH log,c
       CALL {
         WITH log
         WITH log WHERE $loggedBy IS NOT NULL
         MATCH (m:Member {id: $loggedBy})
         MERGE (m)<-[:LOGGED_BY]-(log)
         RETURN COUNT(log)
       }

       RETURN c
      """
    )
}
