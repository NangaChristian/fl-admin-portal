type Member {
	memberID: ID!
	firstName: String
	otherName: String
	lastName: String
	email: String
	phoneNumber: String
	whatsappNumber: String
	pictureUrl: String
	gender: Gender  @relation(name: "HAS_GENDER", direction: "OUT")
	maritalStatus: MaritalStatus @relation(name: "HAS_MARITAL_STATUS", direction: "OUT")
	dob: TimeGraph @relation(name: "WAS_BORN_ON", direction: "OUT")
	title: [HasTitle]
	ministry: Ministry @relation(name: "BELONGS_TO", direction: "OUT")
	occupation: Occupation @relation(name: "HAS_OCCUPATION", direction: "OUT")
	bacenta: Bacenta @relation(name: "BELONGS_TO", direction: "OUT")
	leadsBacenta: [Bacenta] @relation(name: "LEADS", direction: "OUT")
	leadsCentre: [Centre] @relation(name: "LEADS", direction: "OUT")
	leadsMinistry: [Ministry] @relation(name: "LEADS", direction: "OUT")
	leadsSonta: [Sonta] @relation(name: "LEADS", direction: "OUT")
	townGSO: [Town] @relation(name: "LEADS", direction: "OUT")
	campusGSO: [Campus] @relation(name: "LEADS", direction: "OUT")
	leadershipHistory: [LeaderHistory] @relation(name:"HAS_LEADERSHIP_HISTORY",direction:"OUT")
	townBishop: [Town] @relation(name: "HAS_TOWN", direction: "OUT")
	campusBishop: [Campus] @relation(name: "HAS_CAMPUS", direction: "OUT")
}

type Gender {
	gender: String
	members: [Member] @relation(name: "HAS_GENDER", direction: "IN")
}

type MaritalStatus {
	status: String
	members: [Member] @relation(name: "HAS_MARITAL_STATUS", direction: "IN")
}

type Occupation {
	occupation: String
	members: [Member] @relation(name: "HAS_OCCUPATION", direction: "IN")
}

type Title {
	title: String! #Pastor, Reverend, Apostle, Bishop (Mother)
	members: [HasTitle]
}

type HasTitle @relation(name: "HAS_TITLE") {
  from: Member
  to: Title
  yearAppointed: Date
  status: String #active or inactive
  numberofTimesRemoved: Int
}

type TimeGraph {
	date: Date
	memberDob: Member @relation(name: "WAS_BORN_ON", direction: "IN")
	# titleAppointmentDate: Member @relation(name: "APPOINTED_ON", direction: "IN")
	leaderHistoryStartDate: TimeGraph @relation(name: "LEADER_STARTED_ON", direction: "OUT")
	leaderHistoryEndDate: TimeGraph @relation(name: "LEADER_ENDED_ON", direction: "OUT")
	bacentaHistoryStartDate: TimeGraph @relation(name: "BACENTA_STARTED_ON", direction: "OUT")
	bacentaHistoryEndDate: TimeGraph @relation(name: "BACENTA_ENDED_ON", direction: "OUT")
	serviceDate: [BacentaServiceRecords] @relation (name: "SERVICE_DATE", direction:"IN")
}
type LeaderHistory {
	created_at: DateTime
	historyRecord: String
	historyStartDate: TimeGraph @relation(name: "LEADER_STARTED_ON", direction: "OUT")
	historyEndDate: TimeGraph @relation(name: "LEADER_ENDED_ON", direction: "OUT")
	leaders: Member @relation(name:"HAS_LEADERSHIP_HISTORY",direction:"IN")
	bacentaerviceRecords: [BacentaServiceRecords] @relation(name:"HAS_SERVICE_RECORDS",direction:"OUT")
}

type BacentaServiceRecords {
	created_at: DateTime
	bacenta: Bacenta @relation (name:"HAS_SERVICE_RECORDS",direction:"IN")
	serviceDate: TimeGraph @relation (name: "SERVICE_DATE", direction:"OUT")
	attendance: Int
	income: Float
	treasurer1ID: String
	treasurer2ID: String
	leaderHistory: LeaderHistory @relation(name:"HAS_SERVICE_RECORDS",direction:"IN")
}

type BacentaHistory {
	created_at: DateTime
	historyRecord: String #leader was transferred to
	historyStartDate: TimeGraph @relation(name: "BACENTA_STARTED_ON", direction: "OUT")
	historyEndDate: TimeGraph @relation(name: "BACENTA_ENDED_ON", direction: "OUT")
	Bacenta: Bacenta @relation(name:"HAS_BACENTA_HISTORY",direction:"IN")
}

# Campus-Centre, Town-Centre
type Campus {
	campusID: ID
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	sontas: [Sonta] @relation(name: "HAS_MINISTRY", direction: "OUT")
	centres: [Centre] @relation(name: "HAS_CENTRE", direction: "OUT")
	bishop: Member @relation (name:"HAS_CAMPUS",direction: "IN")
}


type Town {
	townID: ID
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	sontas: [Sonta] @relation(name: "HAS_SONTA", direction: "OUT")
	centres: [Centre] @relation(name: "HAS_CENTRE", direction: "OUT")
	bishop: Member @relation (name:"HAS_TOWN", direction: "IN")
}

type Centre {
	centreID: ID
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	bacentas: [Bacenta] @relation(name:"HAS_BACENTA", direction:"OUT")
	basontas: Basonta @relation(name:"HAS_BASONTA", direction: "OUT")
	town: Town @relation(name: "HAS_CENTRE", direction: "IN")
	campus: Campus @relation(name: "HAS_CENTRE",direction:"IN")
}

# Shared Units: Bacenta, Bacenta, Sonta
type Bacenta {
	bacentaID: ID
	name: String
	centre: Centre @relation(name: "HAS_BACENTA", direction: "IN")
	location: Point
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
	meetingDay: ServiceDay @relation(name:"MEETS_ON_DAY", direction: "OUT")
	serviceRecords: BacentaServiceRecords @relation (name:"HAS_SERVICE_RECORDS",direction:"OUT")
}

type ServiceDay {
	day: String!
	bacenta: Bacenta @relation(name: "MEETS_ON_DAY", direction: "IN")
}

type Ministry {
	ministryID: ID
	name: String
	sonta: [Sonta] @relation(name:"HAS_SONTA", direction:"OUT")
	leader: Member @relation(name: "LEADS", direction: "IN")
	members: [Member] @relation(name: "BELONGS_TO", direction: "IN")
}

type Sonta {
	sontaID: ID
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	basonta: [Basonta] @relation(name:"HAS_BASONTA", direction:"OUT")
	ministry: Ministry @relation(name:"HAS_SONTA", direction:"IN")
	town: Town @relation(name: "HAS_SONTA", direction: "IN")
	campus: [Campus] @relation(name: "HAS_SONTA", direction: "IN")
}
type Basonta {
	basontaID: ID
	name: String
	leader: Member @relation(name: "LEADS", direction: "IN")
	centre: Centre @relation(name: "HAS_BASONTA", direction: "IN")
}

#Custom input types
input pastoralAppointment {
	title: String
	date: String
}

input pastoralHistory {
    historyRecord: String
    historyDate: String
}

#Query Definitions
type Query {

#At the Federal Level
	bishopsList: [Member] @isAuthenticated @cypher(statement:"MATCH ()<-[:HAS_CAMPUS|:HAS_TOWN]-(m:Member) RETURN DISTINCT m")
	bishopsListCampus: [Member] @cypher(statement:"MATCH ()<-[:HAS_CAMPUS]-(m:Member) RETURN DISTINCT m")
	bishopsListTown: [Member] @cypher(statement:"MATCH ()<-[:HAS_TOWN]-(m:Member) RETURN DISTINCT m")
	ministryList: [Ministry] @cypher (statement:"MATCH (m:Ministry) RETURN m")
	memberCount: Int! @cypher(statement: "MATCH (m:Member) RETURN COUNT(m)")
	centreCount: Int! @cypher(statement: "MATCH (b:Centre) RETURN COUNT(c)")
	bacentaCount: Int! @cypher(statement: "MATCH (b:Bacenta) RETURN COUNT(b)")

#At the Episcopal Level
	bishopsCampusTownCount(bishopID: ID): Int! @cypher(statement: "MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->(t) RETURN COUNT(t)")
	bishopBacentaDropdown (bishopID: ID, bacentaName:String):[Bacenta] @cypher(statement: "MATCH (b:Bacenta)-[]-(:Centre)-[:HAS_CENTRE]-()-[:HAS_TOWN]-(:Member {memberID: $bishopID}) WHERE toLower(b.name) CONTAINS toLower($bacentaName) RETURN b")
	bishopsSontaMemberList(bishopID: ID): [Member]! @cypher(statement: 
		"""
		MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->()-[:HAS_CENTRE]->()-[:HAS_BACENTA]->()<-[:BELONGS_TO]-(m:Member)-[:BELONGS_TO]->(s)
		RETURN m
		"""
		)
	bishopSontaMemberCount(bishopID: ID): Int! @cypher(statement: 
		"""
		MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->()-[:HAS_CENTRE]->()-[:HAS_BACENTA]->()<-[:BELONGS_TO]-(m:Member)-[:BELONGS_TO]->(s)
		RETURN COUNT(m)
		"""
		)
	bishopSontaMemberCountList(bishopID: ID): [Ministry]! @cypher(statement: 
		"""
		MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->()-[:HAS_CENTRE]->()-[:HAS_BACENTA]->()<-[:BELONGS_TO]-(m:Member)-[:BELONGS_TO]->(s:Ministry)
		RETURN s, COUNT(m)
		"""
		)
	bishopPastorCount(bishopID: ID): Int! @cypher(statement: "MATCH (t:Title)<-[:HAS_TITLE]-(m:Member)-[:BELONGS_TO]->()<-[:HAS_BACENTA]-()-[:HAS_CENTRE]-()-[:HAS_TOWN|:HAS_CAMPUS]-(:Member {memberID: $bishopID}) RETURN COUNT(m)")
	bishopPastorList(bishopID: ID): [Member] @cypher(statement: "MATCH (t:Title)<-[:HAS_TITLE]-(m:Member)-[:BELONGS_TO]->()<-[:HAS_BACENTA]-()-[:HAS_CENTRE]-()-[:HAS_TOWN|:HAS_CAMPUS]-(:Member {memberID: $bishopID}) RETURN m")
	bishopMemberList(bishopID: ID): [Member]! @cypher(statement: 
		"""
		MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->(t)
		MATCH (t)-[:HAS_CENTRE]->(com)
		MATCH (com)-[:HAS_BACENTA]->(c)
		MATCH (c)<-[:BELONGS_TO*]-(m:Member)
		RETURN m
		"""
		)
	bishopMemberCount(bishopID: ID): Int! @cypher(statement: 
		"""
		MATCH (:Member {memberID: $bishopID})-[:HAS_TOWN|:HAS_CAMPUS]->(t)
		MATCH (t)-[:HAS_CENTRE]->(com)
		MATCH (com)-[:HAS_BACENTA]->(c)
		MATCH (c)<-[:BELONGS_TO*]-(m:Member)
		RETURN COUNT(m)
		"""
		)

#At the Town Level
	displayTown(townID: ID):Town @cypher(statement: "MATCH (t:Town {townID:$townID}) RETURN t")
	townList(bishopID: ID): [Town] @cypher(statement: "MATCH (ttl:Title {title:'Bishop'})<-[:HAS_TITLE]-(a:Member {memberID:$bishopID})-[:HAS_TOWN]->(t:Town) RETURN t")
	townBacentaList(townID:ID):[Bacenta] @cypher(statement: "MATCH (t:Town {townID: $townID})-[:HAS_CENTRE]->(:Centre)-[:HAS_BACENTA]-> (c:Bacenta) RETURN c")
	townSontaList (townID:ID):[Sonta] @cypher(statement: "MATCH (t:Town {townID: $townID})-[:HAS_SONTA]->(s:Sonta)  RETURN s")
	townCentreList(townID: ID): [Centre] @cypher(statement: "MATCH (t:Town {townID:$townID})-[:HAS_CENTRE]->(c:Centre) RETURN c")
	townCentreCount(townID: ID): Int! @cypher(statement: "MATCH(:Town {townID:$townID})-[:HAS_CENTRE]->(c:Centre) RETURN COUNT(c)")
	townBacentaCount(townID: ID): Int! @cypher(statement: "MATCH (:Town {townID:$townID})-[]-()-[:HAS_BACENTA]->(cen:Bacenta) RETURN COUNT(cen)")
	townSontaCount(townID: ID): Int! @cypher(statement: "MATCH (:Town {townID:$townID})-[:HAS_MINISTRY]->(s:Sonta) RETURN COUNT(s)")
	townMemberCount(townID: ID): Int! @cypher(statement: "MATCH (:Town {townID:$townID})-[]-(:Centre)-[]->(:Bacenta)<-[:BELONGS_TO]-(m:Member) RETURN COUNT(m)")

#At the Campus Level
	displayCampus(campusID: ID):Campus @cypher(statement: "MATCH (t:Campus {campusID:$campusID}) RETURN t")
	campusList(bishopID: ID): [Campus] @cypher(statement: "MATCH (ttl:Title {title:'Bishop'})<-[:HAS_TITLE]-(a:Member {memberID:$bishopID})-[:HAS_CAMPUS]->(c:Campus) RETURN c")
	campusBacentaList(campusID:ID):[Bacenta] @cypher(statement: "MATCH (t:Campus {campusID: $campusID})-[:HAS_CENTRE]->(:Centre)-[:HAS_BACENTA]-> (c:Bacenta) RETURN c")
	campusCentreList(campusID: ID): [Centre] @cypher(statement: "MATCH (t:Campus {campusID:$campusID})-[:HAS_CENTRE]->(c:Centre) RETURN c")
	campusCentreCount(campusID: ID): Int! @cypher(statement: "MATCH(:Campus {campusID:$campusID})-[:HAS_CENTRE]->(c:Centre) RETURN COUNT(c)")
	campusBacentaCount(campusID: ID): Int! @cypher(statement: "MATCH (:Campus {campusID:$campusID})-[]-()-[:HAS_BACENTA]->(cen:Bacenta) RETURN COUNT(cen)")
	campusSontaCount(campusID: ID): Int! @cypher(statement: "MATCH (:Campus {campusID:$campusID})-[:HAS_MINISTRY]->(s:Sonta) RETURN COUNT(s)")
	campusMemberCount(campusID: ID): Int! @cypher(statement: "MATCH (:Campus {campusID:$campusID})-[]-(:Centre)-[]->(:Bacenta)<-[:BELONGS_TO]-(m:Member) RETURN COUNT(m)")

#At the Centre Level
	displayCentre(centreID: ID):Centre @cypher(statement: "MATCH (c:Centre {centreID:$centreID}) RETURN c")
	centreDropdown (centreName:String):[Centre] @cypher(statement: "MATCH (c:Centre) WHERE toLower(c.name) CONTAINS toLower($centreName) RETURN c")
	centreBacentaList(centreID:ID):[Bacenta] @cypher(statement: """
	MATCH (c:Bacenta)  
	WHERE (:Centre {centreID:$centreID})-[:HAS_BACENTA]->(c)
	RETURN c
	"""
	)
	centreBacentaCount(centreID: ID): Int! @cypher(statement: "MATCH (:Centre {centreID:$centreID})-[:HAS_BACENTA]->(cen:Bacenta) RETURN COUNT(cen)")
	centreSontaCount(centreID: ID): Int! @cypher(statement: "MATCH (s:Sonta)<-[:HAS_MINISTRY]-(:Centre {name:$centre}) RETURN COUNT(s)")
	centreMemberCount(centreID: ID): Int! @cypher(statement: "MATCH (:Centre {centreID:$centreID})-[:HAS_BACENTA]->(c:Bacenta)<-[:BELONGS_TO]-(m:Member) RETURN COUNT(m)")

#At the Bacenta Level
	displayBacenta(bacentaID: ID):Bacenta @cypher(statement: "MATCH (c:Bacenta{bacentaID:$bacentaID}) RETURN c")
	bacentaMemberCount (bacentaID:ID):Int @cypher(statement: "MATCH (c:Bacenta{bacentaID:$bacentaID}) MATCH (c)<-[:BELONGS_TO]-(m:Member) RETURN COUNT(m)")
	bacentaDropdown (bacentaName:String):[Bacenta] @cypher(statement: "MATCH (c:Bacenta) WHERE toLower(c.name) CONTAINS toLower($bacentaName) RETURN c")

#At the Ministry Level
	displayMinistry(ministryID: ID):Ministry @cypher(statement:"MATCH (m:Ministry {ministryID: $ministryID}) RETURN m")
	sontaTownList(ministryID: ID, bishopID: ID): [Town] @cypher(statement: 
	"""
	MATCH (n:Ministry {ministryID: $ministryID})<-[:BELONGS_TO]-(m:Member)
	MATCH (m)-[:BELONGS_TO]->(:Bacenta)<-[:HAS_BACENTA]-()<-[:HAS_CENTRE]-(e)
	MATCH (e)<-[:HAS_TOWN|HAS_CAMPUS]-(:Member {memberID: $bishopID})
	RETURN DISTINCT e,n
	"""
	)

#At the Sonta Level
	sontaList:[Sonta] @cypher(statement: "MATCH (s:Sonta) RETURN s")
	townSontaLeader(ministryID: ID, bishopID: ID): [Member] @cypher (statement:"""
	MATCH (n:Ministry)<-[:BELONGS_TO]-(m:Member)
	MATCH (m)-[:BELONGS_TO]->(:Bacenta)<-[:HAS_BACENTA]-()<-[:HAS_CENTRE]-(e)
	MATCH (e)<-[:HAS_TOWN|HAS_CAMPUS]-(:Member {memberID: $bishopID})
	MATCH (n)-[:HAS_SONTA]->(s:Sonta)<-[:LEADS]-(l:Member)
	WHERE s.name CONTAINS e.name
    RETURN DISTINCT l
	"""
	)

#Members
	# Display Member basecd on ID
	displayMember(memberID: ID):Member @cypher(statement: "MATCH (m:Member {memberID:$memberID}) RETURN m")

#Fuzzy Search
	globalSearch(searchKey:String!):[Member] @cypher(statement:"MATCH (m:Member) WHERE toLower(m.firstName) STARTS WITH $searchKey OR toLower(m.lastName) STARTS WITH $searchKey RETURN m")
	occupationList(searchKey:String!):[Occupation] @cypher(statement:"MATCH (o:Occupation) WHERE toLower(o.occupation) CONTAINS toLower($searchKey) RETURN o")

#Filtering
	FilterMembers(
		gender: String
		maritalStatus: String
		occupation: String
		yearAppointed: Int
		title: String
		age: Int
	):Member
	@cypher(statement:
	"""
	MATCH (m:Member)-[:HAS_GENDER]->(g:Gender {gender: $gender})
	WHERE EXISTS {
    MATCH (:MaritalStatus {status:$maritalStatus})<-[:HAS_MARITAL_STATUS]-(m)-[:HAS_OCCUPATION]->(:Occupation {occupation:$occupation}) 
    	WHERE EXISTS {
        MATCH (t:Title{title:$title})<-[tit:HAS_TITLE]-(m) 
        WHERE date(tit.yearAppointed).year = $yearAppointed
        } WHERE EXISTS
			{
				MATCH (m)-[:WAS_BORN_ON]->(dob:TimeGraph)
				WHERE date().year - date(dob.date).year = $age
			}
    }
    RETURN m
	"""
	)
}

#Mutation Definitions
type Mutation {

	#CREATE OPERATIONS
	# Add Member to the Database
	AddMember(
		firstName: String!
		middleName: String
		lastName: String!
		email: String
		phoneNumber: String!
		whatsappNumber: String
		dob: String!
		maritalStatus: String!
		gender: String!
		occupation: String
		bacenta: String!
		ministry: String
		pictureUrl: String!
		pastoralAppointment: [pastoralAppointment]
		pastoralHistory: [pastoralHistory]
	): Member
	@cypher(statement:
	"""
	MERGE (m:Member {whatsappNumber:$whatsappNumber})
	ON CREATE SET
		m.memberID = apoc.create.uuid(),
		m.firstName = $firstName,
		m.middleName = $middleName,
		m.lastName = $lastName,
		m.email = $email,
		m.phoneNumber = $phoneNumber,
		m.pictureUrl = $pictureUrl

	WITH m
	MATCH (ms:MaritalStatus {status:$maritalStatus})
	MATCH (g:Gender {gender: $gender})
	
	MERGE (t:TimeGraph {date:date($dob)})	
    MERGE (m)-[:HAS_MARITAL_STATUS]-> (ms)
	MERGE (m)-[:HAS_GENDER]-> (g)
    MERGE (m)-[:WAS_BORN_ON]->(t)
    
    WITH m

    CALL {
    	WITH m
    	WITH m  WHERE $occupation IS NOT NULL
    	MERGE (o:Occupation {occupation:$occupation})
		MERGE (m)-[:HAS_OCCUPATION]-> (o)
    	RETURN count(m)
    	}
	WITH m
	CALL {
    	WITH m
    	WITH m  WHERE $bacenta IS NOT NULL
    	MATCH (c:Bacenta {bacentaID: $bacenta})
		MERGE (m)-[:BELONGS_TO]-> (c)
    	RETURN count(m)
    	}
	WITH m
	CALL {
    	WITH m
    	WITH m  WHERE $ministry IS NOT NULL
    	MATCH (s:Ministry {ministryID:$ministry})
		MERGE (m)-[:BELONGS_TO]-> (s)
    	RETURN count(m)
    	}
   
	RETURN m
	"""
	),
	AddLeaderTitle(
		memberID: ID!
		pastoralAppointment: [pastoralAppointment]
	):Title
	@cypher(statement:
	"""
	MATCH (member:Member {memberID: $memberID})
	UNWIND $pastoralAppointment as x
	MERGE (t:Title {title: x.title})
	MERGE (member)-[r:HAS_TITLE]->(t)
		SET r.yearAppointed = date(x.date)
	RETURN t
	"""
	),
	AddLeaderHistory(
		memberID: ID
		pastoralHistory: [pastoralHistory]
	):LeaderHistory
	@cypher(statement:
	"""
	UNWIND $pastoralHistory as x
	CREATE (h:LeaderHistory)
		SET
		h.historyRecord = x.historyRecord,
		h.created_at = datetime()
	with h
	MATCH (l:Member {memberID: $memberID})
	MERGE (tg:TimeGraph {date: date(x.historyDate)})
	MERGE (h)-[:LEADER_STARTED_ON]->(tg)
	MERGE (l)-[:HAS_LEADERSHIP_HISTORY]->(h) 
	RETURN h
	"""
	),
	AddTown(
		townName: String
		lWhatsappNumber: String
		bishopID: ID
		centres:[ID]
	):Town
	@cypher(statement:
	"""
	CREATE (t:Town {name:$townName})
    	SET 
		t.townID = apoc.create.uuid()
	WITH t
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MERGE (m)-[:LEADS]->(t)
	MERGE (a:Member {memberID: $bishopID})
	MERGE (a)-[:HAS_TOWN]->(t)

	WITH t
    CALL {
    	WITH t
    	WITH t  WHERE $centres IS NOT NULL
    	UNWIND $centres AS x
        MATCH (c:Centre {centreID:x})
        MATCH (t1)-[r:HAS_CENTRE]->(c)
        DELETE r
        MERGE (t)-[:HAS_CENTRE]->(c)
    	RETURN count(t)
    	}

	RETURN t
	"""
	),
	AddCampus(
		campusName: String
		lWhatsappNumber: String
		bishopID: ID
		centres:[ID]
	):Campus
	@cypher(statement:
	"""
	CREATE (t:Campus {name:$campusName})
    	SET 
		t.campusID = apoc.create.uuid()
	WITH t
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MERGE (m)-[:LEADS]->(t)
	MERGE (a:Member {memberID: $bishopID})
	MERGE (a)-[:HAS_CAMPUS]->(t)

	WITH t
    CALL {
    	WITH t
    	WITH t  WHERE $centres IS NOT NULL
    	UNWIND $centres AS x
        MATCH (c:Centre {centreID:x})
        MATCH (t1)-[r:HAS_CENTRE]->(c)
        DELETE r
        MERGE (t)-[:HAS_CENTRE]->(c)
    	RETURN count(t)
    	}

	RETURN t
	"""
	),
	AddCentre(
		centreName: String
		lWhatsappNumber: String
		town: ID
		campus: ID
		bacentas:[ID]
	):Centre
	@cypher(statement:
	"""
	CREATE (c:Centre {name:$centreName})
    	SET 
		c.centreID = apoc.create.uuid()
	WITH c
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MERGE (m)-[:LEADS]->(t)

	WITH c
	CALL {
		WITH c
		WITH c WHERE $town IS NOT NULL
		MATCH (t:Town {townID: $town})
		MERGE (t)-[:HAS_CENTRE]->(c)
		RETURN count(c)
	}

	WITH c
	CALL {
		WITH c
		WITH c WHERE $campus IS NOT NULL
		MATCH (t:Campus {campusID: $campus})
		MERGE (t)-[:HAS_CENTRE]->(c)
		RETURN count(c)
	}

	WITH c
    CALL {
    	WITH c
    	WITH c  WHERE $centres IS NOT NULL
    	UNWIND $centres AS x
        MATCH (c:Centre {centreID:x})
        MATCH (c1)-[r:HAS_CENTRE]->(c)
        DELETE r
        MERGE (c)-[:HAS_CENTRE]->(c)
    	RETURN count(c)
    	}

	RETURN t
	"""
	),
	AddBacenta(
		bacentaName: String!
		bacentaLeaderFName: String
		bacentaLeaderLName: String
		centreID: ID
		meetingDay: String!
		venueLongitude: Float
		venueLatitude: Float
	):Bacenta
	@cypher(statement:
	"""
	MERGE(c:Bacenta {name:$bacentaName,location: point({latitude:toFloat($venueLatitude), longitude:toFloat($venueLongitude), crs:'WGS-84'})})
    	ON CREATE SET
		c.bacentaID = apoc.create.uuid()
    WITH c
	MATCH (m:Member {firstName: $bacentaLeaderFName,lastName:$bacentaLeaderLName}) 
	MATCH (com:Centre {centreID: $centreID})
    MATCH (md:ServiceDay {day: $meetingDay})
    WITH m, com, md,c
	MERGE (com)-[:HAS_BACENTA]->(c)
    MERGE (c)-[:MEETS_ON_DAY]->(md)
	MERGE (m)-[:LEADS]->(c)
    RETURN c
	"""
	),


	#UPDATE OPERATIONS
	EditMemberDetails(
		memberID: ID!
		firstName: String!
		middleName: String
		lastName: String!
		email: String
		phoneNumber: String!
		whatsappNumber: String
		dob: String!
		maritalStatus: String!
		gender: String!
		occupation: String
		bacenta: String
		ministry: String
		pictureUrl: String!
		pastoralAppointment: [pastoralAppointment]
		pastoralHistory: [pastoralHistory]
	): Member
	@isAuthenticated
	@cypher(statement:
	"""
	MATCH (m:Member {memberID:$memberID})
	SET
		m.firstName = $firstName,
		m.middleName = $middleName,
		m.lastName = $lastName,
		m.email = $email,
		m.phoneNumber = $phoneNumber,
		m.pictureUrl = $pictureUrl

	WITH m
	
	MATCH (g:Gender {gender: $gender})
	MERGE (t:TimeGraph {date: date($dob)})	
	MERGE (m)-[:HAS_GENDER]-> (g)
    MERGE (m)-[:WAS_BORN_ON]->(t)
    
	WITH m
    CALL {
    	WITH m
    	WITH m  WHERE $maritalStatus IS NOT NULL
    	MATCH (ms:MaritalStatus {status:$maritalStatus})
		MERGE (m)-[r1:HAS_MARITAL_STATUS]->()
		DELETE r1
		MERGE (m)-[:HAS_MARITAL_STATUS]-> (ms)
    	RETURN count(m)
    	}
    WITH m
    CALL {
    	WITH m
    	WITH m  WHERE $occupation IS NOT NULL
		MATCH (m)-[r1:HAS_OCCUPATION]-> ()
    	MERGE (o:Occupation {occupation:$occupation})
		DELETE r1
		MERGE (m)-[:HAS_OCCUPATION]-> (o)
    	RETURN count(m)
    	}
	WITH m
	CALL {
    	WITH m
    	WITH m  WHERE $bacenta IS NOT NULL
    	MATCH (c:Bacenta {bacentaID: $bacenta})
		MATCH (m)-[r1:BELONGS_TO]-> (:Bacenta)
		DELETE r1
		MERGE (m)-[:BELONGS_TO]-> (c)
    	RETURN count(m)
    	}
	WITH m
	CALL {
    	WITH m
    	WITH m  WHERE $ministry IS NOT NULL
    	MATCH (s:Ministry {ministryID:$ministry})
		MERGE (m)-[r1:BELONGS_TO]-> (:Ministry)
		DELETE r1
		MERGE (m)-[:BELONGS_TO]-> (s)
    	RETURN count(m)
    	}
   
	RETURN m
	"""
	),
	EditTown(
		townID: ID
		townName: String
		lWhatsappNumber: String
		bishopID: ID
		centres:[ID]
	):Town
	@cypher(statement:
	"""
	MATCH (t:Town {townID: $townID})
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MERGE (m)-[:LEADS]->(t)
	MERGE (a:Member {memberID: $bishopID})
	MERGE (a)-[:HAS_TOWN]->(t)

	WITH t
    CALL {
    	WITH t
    	WITH t  WHERE $centres IS NOT NULL

    	UNWIND $centres AS x
        MATCH (c:Centre {centreID:x})
        MATCH (t1)-[r:HAS_CENTRE]->(c)
        DELETE r
        MERGE (t)-[:HAS_CENTRE]->(c)
    	RETURN count(t)
    	}

	RETURN t
	"""
	),

	#DELETE OPERATIONS
	RemoveBacenta(bacentaID: ID!):Bacenta
	@cypher(statement:
	"""
	MATCH (c:Bacenta {bacentaID:$bacentaID})
	DETACH DELETE c
	"""
	),
	MakeBacentaLeader(
		memberID: ID
		lWhatsappNumber: String
		groupToLead: String
		startDate: Date
		):Member
	@cypher(statement:
	"""
	MATCH (m:Member {memberID: $memberID})
	MERGE (l:LeaderHistory)
		ON CREATE SET 
		l.created_at=datetime(),
		l.historyRecord="Frank Opoku went to lead the Aba Gomez Bacenta"
	MERGE (tg:TimeGraph {date:date("2020-02-01")})
	MERGE (l)-[:LEADER_STARTED_ON]->(tg)
	MERGE (m)-[:HAS_LEADERSHIP_HISTORY]->(l)

	# MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	# MATCH (c:Bacenta {name: $groupToLead})
	# MERGE (l)-[leads:LEADS]->(c)
	# 	SET leads.startDate: $startDate
	# MERGE (hist:LeaderHistory {HistoryDate:$startDate, HistoryRecord: `m.firstName m.lastName has been has been made the Bacenta Leader of $groupNotToLead`})
	# MERGE (m)-[:HAS_LEADERSHIP_HISTORY]->(hist)
	# RETURN m
	"""
	),
	RemoveBacentaLeader(
		lWhatsappNumber: String
		groupToNotLead: String
		endDate: Date
		):Member
	@cypher(statement:
	"""
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MATCH (c:Bacenta {name: $groupToNotLead})
	MERGE (l)-[leads:LEADS]->(c)
		SET leads.endDate: $endDate
	MERGE (hist:LeaderHistory {HistoryDate:$endDate, HistoryRecord: `m.firstName m.lastName has been has been removed as a bacenta leader of $groupNotToLead`})
	MERGE (m)-[:HAS_LEADERSHIP_HISTORY]->(hist)
	RETURN m
	"""
	),
	TransferBacentaLeader(
		lWhatsappNumber: String
		oldGroupToLead: String
		newGroupToLead: String
		startDate: Date
		endDate: Date
		):Member
	@cypher(statement:
	"""
	MATCH (m:Member {whatsappNumber: $lWhatsappNumber})
	MATCH (oldc:Bacenta {bacentaID: $oldGroupToLead})
	MATCH (newc:Bacenta {bacentaID: $newGroupToLead})
	MATCH (l)-[leadsold:LEADS]->(oldc)
		SET leadsold.edDate: $endDate
	MERGE (l)-[leadsnew:LEADS]->(newc)
		SET leadsnew.startDate: $startDate
	MERGE (hist:LeaderHistory {HistoryDate:$endDate, HistoryRecord: `m.firstName m.lastName has been transferred from $oldc to $newc`})
	MERGE (m)-[:HAS_LEADERSHIP_HISTORY]->(hist)
	RETURN m
	"""
	)
}